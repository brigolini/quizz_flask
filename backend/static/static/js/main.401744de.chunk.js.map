{"version":3,"sources":["components/answer/Answer.tsx","redux/actions/error/ErrorActions.ts","redux/actions/error/ErrorTypes.ts","api/AxiosInstance.ts","redux/reducers/TriviaReducer.ts","redux/actions/trivia/TriviaTypes.ts","redux/reducers/ErrorReducer.ts","redux/reducers/SecurityReducer.ts","redux/actions/security/SecurityTypes.ts","redux/store/index.tsx","logic/useResult.ts","redux/actions/trivia/TriviaActions.ts","containers/result/Result.tsx","redux/actions/security/SecurityActions.ts","containers/home/Home.tsx","logic/useTrivia.ts","common/Font.tsx","components/question/Question.tsx","containers/trivia/Trivia.tsx","components/api-error/ApiError.tsx","containers/login/Login.tsx","logic/useSecurity.ts","App.tsx","index.tsx"],"names":["AnswerIcon","props","isCorrect","color","size","Answer","useSelector","state","trivia","statistics","questions","answers","useState","index","setIndex","userAnswer","elevation","className","title","options","correct","onClick","prevState","disabled","map","item","pos","alt1","alt2","alt3","alt4","getOption","addError","msg","type","payload","getAxiosInstance","token","config","headers","axiosInstance","Axios","create","interceptors","response","use","error","status","Error","initialTriviaState","undefined","questionIndex","begin","Date","triviaReducer","action","length","newQuestions","slice","correct_answers","initialErrorState","message","errorReducer","initialSecurityState","userId","securityReducer","RootState","combineReducers","security","store","createStore","applyMiddleware","ReduxThunk","useResult","totalCorrect","setTotalCorrect","total","setTotal","phrase","setPhrase","timeToComplete","setTimeToComplete","dispatch","useDispatch","useEffect","seconds","getTime","Math","abs","a","fetchTriviaResultAction","getState","userAnswers","question_id","id","answer","request","post","data","fetchTriviaResults","filter","Result","history","useHistory","intent","Intent","PRIMARY","text","push","getLoginAction","login","userData","access_token","decoded","jwt_decode","user_id","signUp","Home","quizz","parseResponse","quizz_questions","fetchTriviaAction","get","fill","DANGER","Font","style","fontWeight","fontType","children","Question","handleFinish","question","htmlEntities","AllHtmlEntities","setAnswer","width","decode","onChange","value","parseInt","target","selectedValue","label","SUCCESS","Trivia","current","isFinished","answerQuestion","answerTrivia","useTrivia","ApiError","isOpen","icon","textAlign","margin","console","info","Login","showPassword","setShowPassword","username","setUsername","password","setPassword","isLoading","setIsLoading","setError","loginUser","signUpUser","logOutUser","useSecurity","lockButton","WARNING","minimal","event","small","placeholder","rightElement","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.401744de.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {MdCancel, MdCheck} from \"react-icons/all\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/store\";\r\nimport {Button, Card} from \"@blueprintjs/core\";\r\nimport \"./Answer.css\"\r\n\r\ninterface IAnswerIconProps {\r\n    isCorrect: boolean\r\n}\r\n\r\nfunction AnswerIcon(props: IAnswerIconProps) {\r\n    return (\r\n        props.isCorrect ?\r\n            <MdCheck color={\"green\"} size={20}/>\r\n            :\r\n            <MdCancel color={\"red\"} size={20}/>\r\n    )\r\n}\r\n\r\nexport function Answer() {\r\n    const {statistics, questions, answers} = useSelector((state: RootStateType) => state.trivia);\r\n    const [index, setIndex] = useState(0);\r\n    if ((!questions) || (!statistics) || (!answers)) return null;\r\n    let userAnswer: number = questions[index].userAnswer || 0;\r\n    const getOption = (index:number) =>{\r\n        if (index===0) return statistics[index].answers.alt1;\r\n        if (index===1) return statistics[index].answers.alt2;\r\n        if (index===2) return statistics[index].answers.alt3;\r\n        if (index===3) return statistics[index].answers.alt4;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card elevation={3}>\r\n\r\n                <div className={\"divAnswer\"}>Question: {questions[index].title}</div>\r\n                <div className={\"divAnswer\"}>Your Answer: {questions[index].options[userAnswer]} <AnswerIcon\r\n                    isCorrect={answers[index].correct}/></div>\r\n                <div className={\"divAnswer\"}>\r\n                    <Button\r\n                        onClick={() => setIndex(prevState => prevState + 1)}\r\n                        disabled={index > 8}>\r\n                        Next\r\n                    </Button>\r\n                </div>\r\n                <div className={\"divAnswer\"}>\r\n                    See how other competitors answer the same question:\r\n                </div>\r\n                <div className={\"divAnswer\"}>\r\n                    {questions[index].options.map((item,pos)=>{\r\n                        return <><div><span>{item}</span><span>{getOption(pos)}</span></div></>\r\n                    })}\r\n                </div>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n","import {ADD_ERROR, CLEAR_ERROR, ErrorActionTypes} from \"./ErrorTypes\"\r\n\r\nexport const addError = (msg: string): ErrorActionTypes => ({\r\n    type: ADD_ERROR,\r\n    payload: msg,\r\n});\r\n\r\nexport const clearErrors = (): ErrorActionTypes => ({\r\n    type: CLEAR_ERROR\r\n})","import {Action} from \"redux\";\r\n\r\nexport const ADD_ERROR=\"NEW_ERROR\";\r\nexport const CLEAR_ERROR=\"CLEAR_ERROR\"\r\n\r\ninterface AddErrorAction extends Action{\r\n    type: typeof ADD_ERROR,\r\n    payload: string\r\n}\r\n\r\ninterface ClearErrorAction extends Action{\r\n    type: typeof CLEAR_ERROR\r\n}\r\n\r\nexport type ErrorActionTypes=AddErrorAction | ClearErrorAction;\r\n","import Axios, {AxiosInstance, AxiosRequestConfig} from \"axios\";\r\n\r\n\r\nconst baseURL = 'http://localhost:5000';\r\nexport const getAxiosInstance = (token?:string): AxiosInstance => {\r\n    const config:AxiosRequestConfig = {headers:{}};\r\n    config.baseURL = baseURL;\r\n    if (token)\r\n        config.headers['Authorization'] = `JWT ${token}`;\r\n    const axiosInstance = Axios.create(config);\r\n    axiosInstance.interceptors.response.use(response => response,\r\n        (error)=>{\r\n            const {status} = error.response;\r\n            if (status>399) throw new Error (\"Error Accessing API\");\r\n        })\r\n    return axiosInstance;\r\n}\r\n\r\n","import {\r\n    ANSWER_QUESTION,\r\n    FETCH_TRIVIA,\r\n    FETCH_TRIVIA_RESULTS, FetchTriviaResultsAction, RESET_TRIVIA,\r\n    TriviaActionTypes,\r\n    TriviaQuestion,\r\n} from \"../actions/trivia/TriviaTypes\";\r\nimport {TriviaCorrectAnswer, TriviaStatistic} from \"../../api/APiTrivia\";\r\n\r\n\r\nexport interface TriviaState {\r\n    questions: TriviaQuestion[] | undefined,\r\n    answers: TriviaCorrectAnswer[] | undefined\r\n    statistics: TriviaStatistic[] | undefined\r\n    questionIndex: number;\r\n    begin: Date;\r\n}\r\n\r\nexport const initialTriviaState = {\r\n    questions: undefined,\r\n    questionIndex: 0,\r\n    answers: undefined,\r\n    statistics: undefined,\r\n    begin:new Date(),\r\n};\r\n\r\nconst triviaReducer = (state: TriviaState = initialTriviaState, action: TriviaActionTypes): TriviaState => {\r\n    switch (action.type) {\r\n        case FETCH_TRIVIA:\r\n            return {...state, questions: action.payload, questionIndex: 0};\r\n\r\n        case ANSWER_QUESTION:\r\n            if (!state.questions)\r\n                throw Error('There is no questions, should not answer it');\r\n            if (state.questionIndex >= state.questions.length)\r\n                throw Error(\"Can't answer question, trivia is over\");\r\n            const newQuestions = state.questions.slice();\r\n            newQuestions[state.questionIndex].userAnswer = action.payload\r\n            return {...state, questionIndex: state.questionIndex + 1, questions: newQuestions};\r\n\r\n        case RESET_TRIVIA:\r\n            state = {...initialTriviaState};\r\n            return state;\r\n\r\n        case FETCH_TRIVIA_RESULTS:\r\n            return {\r\n                ...state,\r\n                answers: (action as FetchTriviaResultsAction).payload.correct_answers,\r\n                statistics: (action as FetchTriviaResultsAction).payload.statistics\r\n            }\r\n\r\n        case \"BEGIN_TRIVIA\":\r\n            return {\r\n                ...state,\r\n                begin: new Date()\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default triviaReducer;\r\n","import {Action} from \"redux\";\r\nimport {TriviaCorrectAnswer, TriviaStatistic} from \"../../../api/APiTrivia\";\r\n\r\nexport const FETCH_TRIVIA = \"FETCH_TRIVIA\";\r\nexport const ANSWER_QUESTION = \"ANSWER_QUESTION\";\r\nexport const RESET_TRIVIA = \"RESET_TRIVIA\";\r\nexport const FETCH_TRIVIA_RESULTS = 'FETCH_TRIVIA_RESULTS';\r\nexport const BEGIN_TRIVIA = 'BEGIN_TRIVIA';\r\n\r\nexport interface TriviaQuestion {\r\n    id: number;\r\n    title: string;\r\n    options: string[];\r\n    userAnswer: number | undefined;\r\n}\r\n\r\nexport interface FetchTriviaAction extends Action {\r\n    type: typeof FETCH_TRIVIA,\r\n    payload: TriviaQuestion[]\r\n}\r\n\r\nexport interface AnswerTriviaQuestionAction extends Action {\r\n    type: typeof ANSWER_QUESTION,\r\n    payload: number\r\n}\r\n\r\nexport interface ResetTriviaAction {\r\n    type: typeof RESET_TRIVIA\r\n}\r\n\r\nexport interface BeginTriviaAction {\r\n    type: typeof BEGIN_TRIVIA\r\n}\r\n\r\nexport type FetchTriviaResultsPayload = { correct_answers: TriviaCorrectAnswer[], statistics: TriviaStatistic[] };\r\n\r\nexport interface FetchTriviaResultsAction {\r\n    type: typeof FETCH_TRIVIA_RESULTS,\r\n    payload: FetchTriviaResultsPayload\r\n}\r\n\r\nexport type TriviaActionTypes =\r\n    FetchTriviaAction\r\n    | AnswerTriviaQuestionAction\r\n    | ResetTriviaAction\r\n    | FetchTriviaResultsAction\r\n    | BeginTriviaAction;\r\n\r\n\r\n","import {ErrorActionTypes} from \"../actions/error/ErrorTypes\";\r\n\r\nexport interface ErrorState {\r\n    message: string | null\r\n}\r\n\r\nexport const initialErrorState = {message: null};\r\nconst errorReducer = (state: ErrorState = initialErrorState, action: ErrorActionTypes): ErrorState => {\r\n    switch (action.type) {\r\n        case \"NEW_ERROR\":\r\n            state = {message: action.payload};\r\n            return state;\r\n        case \"CLEAR_ERROR\":\r\n            state = initialErrorState\r\n            return state;\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\nexport default errorReducer;\r\n","import {LOGIN, LOGOUT, LoginAction, SecurityActionTypes} from \"../actions/security/SecurityTypes\";\r\n\r\nexport interface SecurityState {\r\n    token: string | undefined,\r\n    userId: number | undefined,\r\n}\r\n\r\nexport const initialSecurityState = {\r\n    token: undefined,\r\n    userId: undefined\r\n};\r\nconst securityReducer = (state: SecurityState = initialSecurityState, action: SecurityActionTypes): SecurityState => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return {\r\n                token: (action as LoginAction).payload.token,\r\n                userId: (action as LoginAction).payload.userId\r\n            }\r\n        case LOGOUT:\r\n            return initialSecurityState\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default securityReducer;\r\n","import {Action} from \"redux\";\r\n\r\nexport const LOGIN = \"LOGIN\";\r\nexport const LOGOUT = \"LOGOUT\";\r\nexport const SIGNUP = \"SIGNUP\";\r\n\r\nexport interface LoginAction extends Action{\r\n    type: typeof LOGIN;\r\n    payload: { token:string,userId:number }\r\n}\r\n\r\nexport interface LogoutAction extends Action{\r\n    type: typeof LOGOUT\r\n}\r\n\r\nexport interface SignUpUserAction extends Action{\r\n    type: typeof SIGNUP\r\n    payload: string\r\n}\r\n\r\nexport type SecurityActionTypes = LoginAction | LogoutAction\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport ReduxThunk from \"redux-thunk\"\r\nimport triviaReducer , {initialTriviaState, TriviaState} from \"../reducers/TriviaReducer\";\r\nimport errorReducer , {ErrorState, initialErrorState} from \"../reducers/ErrorReducer\";\r\nimport securityReducer , {initialSecurityState, SecurityState} from \"../reducers/SecurityReducer\";\r\n\r\nexport type RootStateType = {\r\n    trivia: TriviaState,\r\n    error: ErrorState,\r\n    security: SecurityState\r\n}\r\n\r\nconst RootState = combineReducers({\r\n    trivia: triviaReducer,\r\n    error: errorReducer,\r\n    security: securityReducer\r\n})\r\n\r\nconst store=\r\n    createStore(\r\n        RootState,\r\n        {trivia:initialTriviaState,error:initialErrorState,security:initialSecurityState},\r\n        applyMiddleware(ReduxThunk)\r\n    )\r\n\r\nexport default store;\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../redux/store\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {fetchTriviaResults} from \"../redux/actions\";\r\nimport {TriviaCorrectAnswer, TriviaStatistic} from \"../api/APiTrivia\";\r\n\r\n\r\ntype UseResultReturnType = {\r\n    answers: TriviaCorrectAnswer[] | undefined;\r\n    statistics: TriviaStatistic[] | undefined\r\n    totalCorrect: number | undefined;\r\n    phrase: string | undefined;\r\n    total: number | undefined;\r\n    timeToComplete: number | undefined;\r\n};\r\nexport const useResult = (): UseResultReturnType => {\r\n    const {answers, statistics, questions, begin} = useSelector((state: RootStateType) => state.trivia);\r\n    const [totalCorrect, setTotalCorrect] = useState<number>();\r\n    const [total, setTotal] = useState<number>();\r\n    const [phrase, setPhrase] = useState<string>();\r\n    const [timeToComplete, setTimeToComplete] = useState<number>()\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (timeToComplete) return;\r\n        const dif = (new Date()).getTime() - begin.getTime();\r\n        const seconds = dif / 1000;\r\n        setTimeToComplete(Math.abs(seconds));\r\n    }, [begin, setTimeToComplete, timeToComplete])\r\n    useEffect(() => {\r\n        if (!questions) return;\r\n        dispatch(fetchTriviaResults(questions))\r\n    }, [questions, dispatch])\r\n\r\n    useEffect(() => {\r\n        if (!answers) return\r\n        setTotal(answers.length);\r\n        let totalCorrect = answers.filter(item => item.correct).length;\r\n        setTotalCorrect(totalCorrect);\r\n        if (totalCorrect < 3)\r\n            setPhrase('Clueless. Don’t be discouraged! Learn some more about this topic,and come back to try again!');\r\n        if ((totalCorrect >= 3) && (totalCorrect <= 5))\r\n            setPhrase('Beginner. This is the level most players end up with after answering this quiz for the first time. Learn some more about this topic and come back to try again!')\r\n        if ((totalCorrect > 5) && (totalCorrect <= 8))\r\n            setPhrase('Confident: This is the level players are getting pro! Continue your progress and rock it!')\r\n        if ((totalCorrect > 8) && (totalCorrect <= 10))\r\n            setPhrase('Expert: This is the highest level achievable! Thanks for being awesome as you are!')\r\n    }, [answers, setTotalCorrect, setTotal])\r\n\r\n    return {answers, statistics, totalCorrect, total, phrase, timeToComplete};\r\n}\r\n","import {\r\n    ANSWER_QUESTION,\r\n    BEGIN_TRIVIA,\r\n    BeginTriviaAction,\r\n    FETCH_TRIVIA,\r\n    FETCH_TRIVIA_RESULTS,\r\n    FetchTriviaAction,\r\n    FetchTriviaResultsAction,\r\n    FetchTriviaResultsPayload,\r\n    RESET_TRIVIA,\r\n    TriviaActionTypes,\r\n    TriviaQuestion\r\n} from \"./TriviaTypes\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addError} from \"../error/ErrorActions\";\r\nimport {ErrorActionTypes} from \"../error/ErrorTypes\";\r\nimport {getAxiosInstance} from \"../../../api/AxiosInstance\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {TriviaResponse} from \"../../../api/APiTrivia\";\r\nimport store from \"../../store\"\r\n\r\nexport const answerTrivia = (answer: number): TriviaActionTypes => ({\r\n    type: ANSWER_QUESTION,\r\n    payload: answer\r\n})\r\n\r\nexport const resetTrivia = (): TriviaActionTypes => ({type: RESET_TRIVIA});\r\n\r\nexport const fetchTrivia = () => async (dispatch: Dispatch<TriviaActionTypes | ErrorActionTypes>) => {\r\n\r\n    const parseResponse = (response: AxiosResponse<TriviaResponse>): TriviaQuestion[] => {\r\n        return response.data.quizz_questions.map(item => {\r\n            return {\r\n                id: item.id,\r\n                title: item.title,\r\n                options: [item.alt1, item.alt2, item.alt3, item.alt4],\r\n                userAnswer: undefined\r\n            }\r\n        });\r\n    }\r\n\r\n    const fetchTriviaAction = (questions: TriviaQuestion[]): FetchTriviaAction => ({\r\n        type: FETCH_TRIVIA,\r\n        payload: questions\r\n    })\r\n    const token = store.getState().security.token\r\n    try {\r\n        const response = await getAxiosInstance(token).get(\"/api/quizz/10\");\r\n        const questions: TriviaQuestion[] = parseResponse(response);\r\n        dispatch(fetchTriviaAction(questions));\r\n    } catch (e) {\r\n        dispatch(addError(\"We are not reaching our servers. Try again latter!\"))\r\n    }\r\n}\r\n\r\nexport const fetchTriviaResults = (questions: TriviaQuestion[]) => async (dispatch: Dispatch<TriviaActionTypes | ErrorActionTypes>) => {\r\n\r\n    const fetchTriviaResultAction = (payload: FetchTriviaResultsPayload): FetchTriviaResultsAction => ({\r\n        type: FETCH_TRIVIA_RESULTS,\r\n        payload\r\n    })\r\n\r\n    const {token,userId} = store.getState().security\r\n    try {\r\n        const userAnswers = questions.map(item => ({\r\n            question_id:item.id,\r\n            answer:item.userAnswer\r\n        }));\r\n        const request = {answers:userAnswers}\r\n        const response =\r\n            await getAxiosInstance(token).post(`api/quizz/user/${userId}`, request);\r\n        dispatch(fetchTriviaResultAction(response.data));\r\n    } catch (e) {\r\n        dispatch(addError(\"We are not reaching our servers. Try again latter!\"))\r\n    }\r\n\r\n}\r\n\r\nexport const beginTrivia=():BeginTriviaAction=>({\r\n    type: BEGIN_TRIVIA\r\n})\r\n\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport {Button} from \"@blueprintjs/core\";\r\nimport {Intent} from \"@blueprintjs/core/lib/esm/common/intent\";\r\nimport {useTrivia} from \"../../logic/useTrivia\";\r\nimport {useHistory} from \"react-router\";\r\nimport {Answer} from \"../../components/answer/Answer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/store\";\r\nimport {resetTrivia} from \"../../redux/actions\";\r\nimport {useResult} from \"../../logic/useResult\";\r\n\r\ninterface IResultProps {\r\n}\r\n\r\nexport function Result(props: IResultProps) {\r\n    const {totalCorrect, total, phrase, timeToComplete} = useResult();\r\n    const trivia = useSelector((state: RootStateType) => state.trivia)\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const handleClick = () => {\r\n        dispatch(resetTrivia());\r\n        history.push('/');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={\"header\"}>\r\n                {timeToComplete && totalCorrect && total ?\r\n                    <>\r\n                        <div><span><p>{`You scored ${totalCorrect} of ${total}`}</p></span></div>\r\n                        <div><span><p>{`It takes you ${timeToComplete} seconds to finish the quizz.`}</p></span></div>\r\n                        <div><span><p>{phrase}</p></span></div>\r\n                    </>\r\n                    :\r\n                    null\r\n                }\r\n            </div>\r\n            <div className={\"main-area\"}>\r\n\r\n                {trivia.questions ?\r\n                    <Answer/>\r\n                    : null}\r\n            </div>\r\n            <div className={\"footer\"}>\r\n                <div className={\"center\"}>\r\n                    <Button\r\n                        intent={Intent.PRIMARY}\r\n                        text={\"Play Again?\"}\r\n                        onClick={handleClick}/>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {getAxiosInstance} from \"../../../api/AxiosInstance\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ErrorActionTypes} from \"../error/ErrorTypes\";\r\nimport {LOGIN, LoginAction, LOGOUT} from \"./SecurityTypes\";\r\nimport {addError} from \"../error/ErrorActions\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\ninterface UserDataType {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nconst getLoginAction = (token: string, userId: number): LoginAction => ({\r\n    type: LOGIN,\r\n    payload: {token, userId}\r\n});\r\n\r\nexport const login = (userData: UserDataType) => async (dispatch: Dispatch<ErrorActionTypes | LoginAction>) => {\r\n    const response = await getAxiosInstance().post(\"/auth\", userData);\r\n    const token = response.data.access_token;\r\n    const decoded = jwt_decode(token);\r\n    // @ts-ignore\r\n    dispatch(getLoginAction(token, decoded.user_id));\r\n}\r\n\r\nexport const logout = () => ({\r\n    type: LOGOUT\r\n})\r\n\r\nexport const signUp = (userData: UserDataType) => async (dispatch: Dispatch<ErrorActionTypes | LoginAction>) => {\r\n    try {\r\n        // The best alternative here is to signup generate a new token.\r\n        // As we are using FlaskJWT, and this library hide the creation of the token.\r\n        // Best way should be use jwt_extended for this.\r\n        // Due to the simplicity of this test. I prefere not to do that\r\n        await getAxiosInstance().post(\"/api/users\", userData);\r\n        const response = await getAxiosInstance().post('/auth', userData);\r\n        const token = response.data.access_token;\r\n        const decoded = jwt_decode(token);\r\n        // @ts-ignore\r\n        dispatch(getLoginAction(token, decoded.user_id))\r\n    } catch (error) {\r\n        if (error.status === 409)\r\n            dispatch(addError(\"This user already exists.\"))\r\n        else\r\n            dispatch(addError(\"We are having problems to access our servers, please try again latter\"))\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {Button, Spinner} from \"@blueprintjs/core\";\r\nimport {Intent} from \"@blueprintjs/core/lib/esm/common/intent\";\r\nimport {useHistory} from \"react-router\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/store\";\r\nimport {beginTrivia, fetchTrivia} from \"../../redux/actions\";\r\nimport {logout} from \"../../redux/actions/security/SecurityActions\";\r\n\r\n\r\nexport function Home() {\r\n    const history = useHistory();\r\n    const quizz = useSelector(((state: RootStateType) => state.trivia));\r\n    const dispatch = useDispatch();\r\n\r\n    const handleBegin=()=>{\r\n        dispatch(beginTrivia());\r\n        history.push(\"/trivia\")\r\n    }\r\n\r\n    const handleLogout=()=>{\r\n        dispatch(logout());\r\n    }\r\n\r\n    if (!quizz.questions) {\r\n        dispatch(fetchTrivia());\r\n    }\r\n    return (\r\n        <>\r\n            <div className={\"header\"}>\r\n                <div className={\"center-text\"}>\r\n                    <h1>Welcome to the Trivia Challenge!</h1>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={\"main\"}>\r\n                <div className={\"center\"}>\r\n                    <Button fill intent={Intent.PRIMARY} onClick={handleBegin}>\r\n                        Begin {!quizz.questions ? <span className={\"loading\"}/> : null}\r\n                    </Button>\r\n                    <Button fill intent={Intent.DANGER} onClick={handleLogout}>\r\n                        Logout\r\n                    </Button>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {TriviaQuestion} from \"../redux/actions/trivia/TriviaTypes\";\r\nimport {RootStateType} from \"../redux/store\";\r\nimport {answerTrivia} from \"../redux/actions\";\r\n\r\ninterface ITriviaReturn {\r\n    question: TriviaQuestion | null,\r\n    current: number,\r\n    total: number,\r\n    isFinished: boolean\r\n    answerQuestion: (asnwer: number) => void\r\n}\r\n\r\nexport const useTrivia = (): ITriviaReturn => {\r\n    const trivia = useSelector((state: RootStateType) => state.trivia);\r\n    const dispatch = useDispatch();\r\n    const {questions, questionIndex} = trivia;\r\n\r\n    const answerQuestion = (answer: number) => {\r\n        if (!questions) return;\r\n        if (trivia.questionIndex < questions.length)\r\n            dispatch(answerTrivia(answer))\r\n    }\r\n\r\n    return {\r\n        question: questions ? questions[questionIndex] : null,\r\n        current: questionIndex,\r\n        total: questions ? questions.length : 0,\r\n        isFinished: questions ? questionIndex === questions.length : false,\r\n        answerQuestion\r\n    };\r\n}\r\n\r\n","import React from \"react\";\r\nimport {FontWeightProperty} from \"csstype\";\r\n\r\ninterface IFontProps {\r\n    fontType: FontWeightProperty;\r\n}\r\n\r\nexport const Font: React.FC<IFontProps> = props =>\r\n    <span style={{fontWeight: props.fontType}}>\r\n        {props.children}\r\n    </span>","import React, {useEffect, useState} from \"react\";\r\nimport {TriviaQuestion} from \"../../redux/actions/trivia/TriviaTypes\";\r\nimport {Button, Card, Checkbox, Radio, RadioGroup} from \"@blueprintjs/core\";\r\nimport {AllHtmlEntities} from \"html-entities\"\r\nimport {Font} from \"../../common/Font\";\r\nimport {MdCancel, MdCheck} from \"react-icons/all\";\r\nimport {Intent} from \"@blueprintjs/core/lib/esm/common/intent\";\r\n\r\ninterface IQuestionDisplayProps {\r\n    question: TriviaQuestion | null;\r\n    options: string[]\r\n    handleFinish: (answer: number) => void\r\n}\r\n\r\n\r\nexport function Question(props: IQuestionDisplayProps) {\r\n    const {options, handleFinish, question} = props;\r\n    const htmlEntities = new AllHtmlEntities()\r\n    const handleChange = (value: any) => {\r\n        setAnswer(parseInt(value.target.value))\r\n    }\r\n    const [answer, setAnswer] = useState(0)\r\n\r\n    useEffect(()=>{\r\n        setAnswer(0);\r\n    },[question])\r\n    if (question) {\r\n        return (\r\n            <>\r\n                <Card elevation={3} style={{width:\"100%\"}}>\r\n                    <p>\r\n                        <>\r\n                            <div>\r\n                                <Font fontType={\"bold\"}>{htmlEntities.decode(question.title)}</Font>\r\n                            </div>\r\n                            <div>\r\n                                <RadioGroup\r\n                                    onChange={handleChange}\r\n                                    selectedValue={answer}\r\n                                >\r\n                                    {options\r\n                                        .map((item, index) => <Radio label={item} value={index}/>)}\r\n                                </RadioGroup>\r\n                            </div>\r\n                            <div className={\"footer\"}>\r\n                                    <span className={\"center\"}>\r\n                                        <Button intent={Intent.SUCCESS} text={\"Ok\"}\r\n                                                onClick={() => handleFinish(answer)}/>\r\n                                   </span>\r\n                            </div>\r\n                        </>\r\n                    </p>\r\n\r\n                </Card>\r\n\r\n            </>\r\n        )\r\n\r\n    } else\r\n        return null;\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {Button} from \"@blueprintjs/core\";\r\nimport {Intent} from \"@blueprintjs/core/lib/esm/common/intent\";\r\nimport {useTrivia} from \"../../logic/useTrivia\";\r\nimport {Question} from \"../../components/question/Question\";\r\nimport {useHistory} from \"react-router\";\r\n\r\ninterface IQuizProps {\r\n}\r\n\r\nexport function Trivia(props: IQuizProps) {\r\n    const {question, current, total, answerQuestion,isFinished} = useTrivia();\r\n    const history = useHistory();\r\n    if (isFinished){\r\n        history.push(\"/result\");\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={\"main-area\"}>\r\n                <Question question={question} options={question ? question.options : []}\r\n                          handleFinish={answerQuestion}/>\r\n                <span className={\"center-text\"}><h3>{`${current + 1} of ${total}`}</h3></span>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Button, Dialog} from \"@blueprintjs/core\";\r\nimport {Intent} from \"@blueprintjs/core/lib/esm/common/intent\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/store\";\r\nimport {clearErrors} from \"../../redux/actions/error/ErrorActions\";\r\n\r\nexport function ApiError(){\r\n  const error = useSelector((state:RootStateType)=>state.error)\r\n  const dispatch = useDispatch();\r\n  return (\r\n  <>\r\n    <Dialog isOpen={error.message!==null}\r\n            title={\"We apologize\"} icon={\"warning-sign\"}>\r\n      <div style={{textAlign:\"center\"}}>\r\n        <p>We are experiencing some trouble in our server. We shold be back soon...</p>\r\n      </div>\r\n      <div style={{margin:\"auto\"}}>\r\n        <Button\r\n            text={\"Ok\"} intent={Intent.PRIMARY}\r\n            onClick={() => {\r\n              console.info(error.message);\r\n              dispatch(clearErrors());\r\n            }}/>\r\n      </div>\r\n    </Dialog>\r\n  </>\r\n  )\r\n}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Button, Card, InputGroup, Label} from \"@blueprintjs/core\";\r\nimport {Intent} from \"@blueprintjs/core/lib/esm/common/intent\";\r\nimport \"./login.css\"\r\nimport {useSecurity} from \"../../logic/useSecurity\";\r\nimport {useHistory} from \"react-router\";\r\n\r\nconst Login = () => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('')\r\n    const {isLoading, loginUser, signUpUser,error} = useSecurity()\r\n    const history = useHistory();\r\n\r\n    const handlePasswordChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.target.value);\r\n    }\r\n\r\n    const handleUsernameChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setUsername(event.target.value);\r\n    }\r\n\r\n    const handleLogin = () => {\r\n        history.push('/');\r\n        loginUser(username, password);\r\n    }\r\n\r\n    const handleSignUp = () => {\r\n        history.push('/');\r\n        signUpUser(username, password);\r\n    }\r\n\r\n    const lockButton = (\r\n        <Button\r\n            icon={showPassword ? \"unlock\" : \"lock\"}\r\n            intent={Intent.WARNING}\r\n            minimal={true}\r\n            onClick={() => setShowPassword(prevState => !prevState)}\r\n        />\r\n    );\r\n    return (\r\n        <div className={\"center\"}>\r\n            <Card elevation={2} className={\"login\"}>\r\n                <div className={\"text\"}>\r\n                    <h1>Welcome to Trivia</h1>\r\n                </div>\r\n                <div className={\"text\"}>\r\n                    <h1>Please login</h1>\r\n                </div>\r\n                <div>\r\n                    <Label>\r\n                        Username:\r\n                        <InputGroup\r\n                            value={username}\r\n                            onChange={handleUsernameChange}\r\n                            small\r\n                            placeholder=\"Username...\"/>\r\n                    </Label>\r\n                </div>\r\n                <div>\r\n                    <Label>\r\n                        Password\r\n                        <InputGroup\r\n                            small\r\n                            value={password}\r\n                            onChange={handlePasswordChange}\r\n                            placeholder=\"Username...\"\r\n                            rightElement={lockButton}\r\n                            type={showPassword ? \"text\" : \"password\"}/>\r\n                    </Label>\r\n                </div>\r\n                {error?\r\n                    <div className={\"error\"}>\r\n                        Invalid information. Maybe signup?\r\n                    </div>\r\n                :\r\n                null}\r\n                <div>\r\n                    <Button\r\n                        intent={Intent.PRIMARY}\r\n                        onClick={handleLogin}\r\n                        fill>\r\n                        Log In\r\n                        {isLoading && <span className={\"loading\"}/>}\r\n                    </Button>\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        intent={Intent.WARNING}\r\n                        onClick={handleSignUp}\r\n                        fill>\r\n                        Create New User\r\n                        {isLoading && <span className={\"loading\"}/>}\r\n                    </Button>\r\n                </div>\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Login;\r\n","import {useDispatch} from \"react-redux\";\r\nimport {useState} from \"react\";\r\nimport {login, logout, signUp} from \"../redux/actions/security/SecurityActions\";\r\n\r\ntype UseSecurityType = {\r\n    isLoading: boolean;\r\n    error: boolean;\r\n    loginUser: (username: string, password: string) => void,\r\n    signUpUser: (username: string, password: string) => void,\r\n    logOutUser: () => void\r\n}\r\nexport const useSecurity = (): UseSecurityType => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n\r\n    const loginUser = async (username: string, password: string) => {\r\n        if ((!username) || (!password)){\r\n            setError(true);\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n        try {\r\n            await dispatch(login({username, password}));\r\n            setIsLoading(false);\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const signUpUser = async (username: string, password: string) => {\r\n        setIsLoading(true);\r\n        if ((!username) || (!password)) return;\r\n        try {\r\n            await dispatch(signUp({username, password}));\r\n            setIsLoading(false);\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const logOutUser = async () => {\r\n        await dispatch(logout());\r\n    }\r\n\r\n    return {isLoading, error, loginUser, signUpUser, logOutUser}\r\n}\r\n","import React from 'react';\nimport {Card} from \"@blueprintjs/core\";\nimport {Result} from \"./containers/result/Result\";\nimport {Home} from \"./containers/home/Home\";\nimport {Trivia} from \"./containers/trivia/Trivia\";\nimport {Route, Switch} from \"react-router\";\nimport {HashRouter} from \"react-router-dom\";\nimport {ApiError} from \"./components/api-error/ApiError\";\nimport {useSelector} from \"react-redux\";\nimport {RootStateType} from \"./redux/store\";\nimport Login from \"./containers/login/Login\";\n\n\nfunction App() {\n    const token = useSelector((state:RootStateType)=>state.security).token\n    return (\n        <>\n            <HashRouter>\n            {!token?\n                <Login/>\n            :\n                <div className={\"screenContainer\"}>\n                    <div className={\"app\"}>\n                        <Card className={\"appConteiner\"} elevation={2}>\n\n                                <Switch>\n                                    <Route path={\"/\"} exact component={Home}/>\n                                    <Route path={\"/trivia\"} exact component={Trivia}/>\n                                    <Route path={\"/result\"} exact component={Result}/>\n                                </Switch>\n                        </Card>\n                    </div>\n                </div>\n\n            }\n            </HashRouter>\n            <ApiError/>\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"normalize.css/normalize.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"./index.css\"\nimport store from \"./redux/store\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}